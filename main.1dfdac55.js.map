{"version":3,"sources":["scripts/main.js"],"names":["checkBtn","document","querySelector","rulesBtns","querySelectorAll","input","attemptsList","rules","levels","lengthOfRandom","messageBoxContent","mistakeLengthMessage","mistakeRepeatMessage","victoryMessage","randomValue","createRandom","checkMatch","computedNum","userNum","result","full","partial","i","length","includes","window","console","log","randomVal","randomNum","Math","floor","random","rulesToggler","classList","toggle","checkKeydown","key","which","preventDefault","addEventListener","event","innerHTML","value","unrepeatingChars","Set","size","checkResult","insertAdjacentHTML","forEach","toggler","button","target","closest","contains","children","level","remove","add","placeholder","repeat","trim"],"mappings":"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","file":"main.1dfdac55.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst checkBtn = document.querySelector('#check-btn');\nconst rulesBtns = document.querySelectorAll('.js-rules-btn');\nconst input = document.querySelector('#input-num');\nconst attemptsList = document.querySelector('#attempts-list');\nconst rules = document.querySelector('#rules');\nconst levels = document.querySelector('.content__levels');\nlet lengthOfRandom = 4;\n\n// message variables\nconst messageBoxContent = document.querySelector('#message-box');\nlet mistakeLengthMessage\n  = `<span class=\"red\">Value length is not ${lengthOfRandom}</span>`;\nconst mistakeRepeatMessage\n  = '<span class=\"red\">Numbers must not be repeated</span>';\nconst victoryMessage\n  = '<span class=\"green\">Well done! Another number now:)</span>';\n\nlet randomValue = createRandom();\n\n// button click\ncheckBtn.addEventListener('click', event => {\n  event.preventDefault();\n  messageBoxContent.innerHTML = '';\n\n  // length validation\n  if (input.value.length !== lengthOfRandom) {\n    messageBoxContent.innerHTML = mistakeLengthMessage;\n\n    return;\n  }\n\n  // repeating chars validation\n  const unrepeatingChars = new Set(input.value);\n\n  if (unrepeatingChars.size !== lengthOfRandom) {\n    messageBoxContent.innerHTML = mistakeRepeatMessage;\n\n    return;\n  }\n\n  // check user's value\n  const checkResult = checkMatch(randomValue, input.value);\n\n  // add user's attempt to the list\n  attemptsList.insertAdjacentHTML(\n    'afterbegin',\n    `\n    <li>\n      ${input.value}\n      <span class=\"green\">${checkResult.full}</span>\n      <span class=\"yellow\">${checkResult.partial}</span>\n    </li>\n    `\n  );\n\n  // user won\n  if (checkResult.full === lengthOfRandom) {\n    messageBoxContent.innerHTML = victoryMessage;\n    attemptsList.innerHTML = '';\n    randomValue = createRandom();\n  }\n\n  // clean the input\n  input.value = '';\n\n  window.console.log(randomValue);\n});\n\n// check user's value function\nfunction checkMatch(computedNum, userNum) {\n  const result = {\n    full: 0,\n    partial: 0,\n  };\n  let { full, partial } = result;\n\n  for (let i = 0; i < computedNum.length; i++) {\n    // check position match\n    if (computedNum[i] === userNum[i]) {\n      full++;\n    }\n\n    // check presence\n    if (userNum.includes(computedNum[i])) {\n      partial++;\n    }\n  }\n\n  partial -= full;\n\n  window.console.log(\n    `Full match: ${full}\\nPartial match: ${partial}`\n  );\n\n  return {\n    full,\n    partial,\n  };\n}\n\n// create a random number\nfunction createRandom() {\n  let randomVal = '';\n\n  while (randomVal.length !== lengthOfRandom) {\n    const randomNum = Math.floor(Math.random() * 10);\n\n    if (!randomVal.includes(randomNum)) {\n      randomVal += randomNum;\n    }\n  }\n\n  return randomVal;\n}\n\n// show/hide rules\nfunction rulesToggler() {\n  rules.classList.toggle('rules--hidden');\n}\n\nrulesBtns.forEach(toggler => {\n  toggler.addEventListener('click', rulesToggler);\n});\n\n// limited input\nfunction checkKeydown(key) {\n  // backspace, enter\n  if (!(key.which === 8 || key.which === 13\n    // 0-9\n    || (key.which >= 48 && key.which <= 57)\n    // arrows\n    || (key.which >= 37 && key.which <= 40))) {\n    key.preventDefault();\n  }\n}\n\ninput.addEventListener('keydown', checkKeydown);\n\n// change level\nlevels.addEventListener('click', event => {\n  event.preventDefault();\n\n  const button = event.target.closest('.content__levels-button');\n\n  if (!button || !levels.contains(button)) {\n    return;\n  }\n\n  [...levels.children].forEach(level => {\n    level.classList.remove('button--level-active');\n  });\n\n  button.classList.add('button--level-active');\n\n  input.value = '';\n  messageBoxContent.innerHTML = '';\n  attemptsList.innerHTML = '';\n\n  lengthOfRandom = +button.innerHTML;\n  input.placeholder = '* '.repeat(lengthOfRandom).trim();\n\n  mistakeLengthMessage\n    = `<span class=\"red\">Value length is not ${lengthOfRandom}</span>`;\n\n  randomValue = createRandom();\n});\n"]}